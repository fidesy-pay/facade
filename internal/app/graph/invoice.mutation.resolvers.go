package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"

	"github.com/fidesy-pay/facade/internal/app/graph/generated"
	"github.com/fidesy-pay/facade/internal/pkg/middleware/auth"
	"github.com/fidesy-pay/facade/internal/pkg/model"
	invoicesservice "github.com/fidesy-pay/facade/internal/pkg/services/invoices-service"
)

// CreateInvoice is the resolver for the createInvoice field.
func (r *invoiceMutationsResolver) CreateInvoice(ctx context.Context, obj *model.InvoiceMutations, input model.CreateInvoiceInput) (*model.CreateInvoicePayload, error) {
	session := auth.GetSession(ctx)

	invoiceID, err := r.invoicesService.CreateInvoice(ctx, session.ClientID, input.UsdAmount)
	if err != nil {
		return nil, fmt.Errorf("invoicesService.CreateInvoice: %w", err)
	}

	return &model.CreateInvoicePayload{
		ID: invoiceID,
	}, nil
}

// UpdateInvoice is the resolver for the updateInvoice field.
func (r *invoiceMutationsResolver) UpdateInvoice(ctx context.Context, obj *model.InvoiceMutations, input model.UpdateInvoiceInput) (*model.UpdateInvoicePayload, error) {
	var payerClientID *string
	sessionPtr := auth.GetSessionPtr(ctx)
	if sessionPtr != nil {
		payerClientID = &sessionPtr.ClientID
	}

	invoice, err := r.invoicesService.UpdateInvoice(ctx, invoicesservice.UpdateInvoiceParams{
		ID:            input.ID,
		Chain:         input.Chain,
		Token:         input.Token,
		PayerClientID: payerClientID,
	})
	if err != nil {
		return nil, fmt.Errorf("invoicesService.UpdateInvoice: %w", err)
	}

	return &model.UpdateInvoicePayload{
		Invoice: invoice,
	}, nil
}

// CheckInvoice is the resolver for the checkInvoice field.
func (r *invoiceMutationsResolver) CheckInvoice(ctx context.Context, obj *model.InvoiceMutations, input model.CheckInvoiceInput) (*model.CheckInvoicePayload, error) {
	invoice, err := r.invoicesService.CheckInvoice(ctx, input)
	if err != nil {
		return nil, fmt.Errorf("invoicesService.CheckInvoice: %w", err)
	}

	return &model.CheckInvoicePayload{
		Invoice: invoice,
	}, nil
}

// InvoiceMutations is the resolver for the invoiceMutations field.
func (r *mutationResolver) InvoiceMutations(ctx context.Context) (*model.InvoiceMutations, error) {
	return &model.InvoiceMutations{}, nil
}

// InvoiceMutations returns generated.InvoiceMutationsResolver implementation.
func (r *Resolver) InvoiceMutations() generated.InvoiceMutationsResolver {
	return &invoiceMutationsResolver{r}
}

type invoiceMutationsResolver struct{ *Resolver }
