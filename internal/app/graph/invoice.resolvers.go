package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"github.com/fidesy-pay/facade/internal/pkg/loaders"
	"time"

	"github.com/fidesy-pay/facade/internal/app/graph/generated"
	"github.com/fidesy-pay/facade/internal/pkg/model"
	clients_service "github.com/fidesy-pay/facade/pkg/clients-service"
	invoices_service "github.com/fidesy-pay/facade/pkg/invoices-service"
)

// Status is the resolver for the status field.
func (r *invoiceResolver) Status(ctx context.Context, obj *invoices_service.Invoice) (model.InvoiceStatus, error) {
	if obj == nil {
		return model.InvoiceStatusUnknownStatus, nil
	}

	status := model.InvoiceStatus(obj.Status.String())
	if !status.IsValid() {
		return model.InvoiceStatusUnknownStatus, nil
	}

	return status, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *invoiceResolver) CreatedAt(ctx context.Context, obj *invoices_service.Invoice) (*time.Time, error) {
	if obj == nil {
		return &time.Time{}, nil
	}

	time := obj.CreatedAt.AsTime()

	return &time, nil
}

// Payer is the resolver for the payer field.
func (r *invoiceResolver) Payer(ctx context.Context, obj *invoices_service.Invoice) (*clients_service.Client, error) {
	if obj.PayerClientId == "" {
		return nil, nil
	}

	return loaders.For(ctx).ClientByIDLoader.Load(ctx, obj.PayerClientId)
}

// Invoice returns generated.InvoiceResolver implementation.
func (r *Resolver) Invoice() generated.InvoiceResolver { return &invoiceResolver{r} }

type invoiceResolver struct{ *Resolver }
