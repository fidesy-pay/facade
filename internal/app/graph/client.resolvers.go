package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"
	"time"

	"github.com/fidesy-pay/facade/internal/app/graph/generated"
	invoicesservice "github.com/fidesy-pay/facade/internal/pkg/services/invoices-service"
	clients_service "github.com/fidesy-pay/facade/pkg/clients-service"
	crypto_service "github.com/fidesy-pay/facade/pkg/crypto-service"
	invoices_service "github.com/fidesy-pay/facade/pkg/invoices-service"
)

// CreatedAt is the resolver for the created_at field.
func (r *clientResolver) CreatedAt(ctx context.Context, obj *clients_service.Client) (*time.Time, error) {
	if obj == nil {
		return &time.Time{}, nil
	}

	time := obj.CreatedAt.AsTime()

	return &time, nil
}

// Wallets is the resolver for the wallets field.
func (r *clientResolver) Wallets(ctx context.Context, obj *clients_service.Client) ([]*crypto_service.Wallet, error) {
	wallets, err := r.cryptoServiceClient.ListWallets(ctx, &crypto_service.ListWalletsRequest{
		Filter: &crypto_service.ListWalletsRequest_Filter{
			ClientIdIn: []string{obj.GetId()},
		},
	})
	if err != nil {
		return nil, fmt.Errorf("cryptoServiceClient.ListWallets: %w", err)
	}

	return wallets.GetWallets(), nil
}

// Invoices is the resolver for the invoices field.
func (r *clientResolver) Invoices(ctx context.Context, obj *clients_service.Client) ([]*invoices_service.Invoice, error) {
	invoices, err := r.invoicesService.ListInvoices(ctx, invoicesservice.ListInvoicesFilter{
		ClientIDIn: []string{obj.GetId()},
	})
	if err != nil {
		return nil, fmt.Errorf("invoicesService.ListInvoices: %w", err)
	}

	return invoices, nil
}

// Client returns generated.ClientResolver implementation.
func (r *Resolver) Client() generated.ClientResolver { return &clientResolver{r} }

type clientResolver struct{ *Resolver }
