// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	crypto_service "github.com/fidesy-pay/facade/pkg/crypto-service"
	invoices_service "github.com/fidesy-pay/facade/pkg/invoices-service"
)

type BalancesFilter struct {
	AddressIn []string `json:"addressIn,omitempty"`
}

type BalancesPagination struct {
	Balances []float64 `json:"balances,omitempty"`
}

type CheckInvoiceInput struct {
	ID string `json:"id"`
}

type CheckInvoicePayload struct {
	Invoice *invoices_service.Invoice `json:"invoice"`
}

type CreateInvoiceInput struct {
	ClientID  string  `json:"client_id"`
	UsdAmount float64 `json:"usd_amount"`
}

type CreateInvoicePayload struct {
	ID string `json:"id"`
}

type InvoicesFilter struct {
	IDIn       []string `json:"idIn,omitempty"`
	ClientIDIn []string `json:"clientIdIn,omitempty"`
}

type InvoicesPagination struct {
	Items []*invoices_service.Invoice `json:"items,omitempty"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginPayload struct {
	Token    string `json:"token"`
	ClientID string `json:"clientId"`
}

type SignUpInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type SignUpPayload struct {
	Token    string `json:"token"`
	ClientID string `json:"clientId"`
}

type UpdateInvoiceInput struct {
	ID    string `json:"id"`
	Chain string `json:"chain"`
	Token string `json:"token"`
}

type UpdateInvoicePayload struct {
	Invoice *invoices_service.Invoice `json:"invoice"`
}

type WalletsFilter struct {
	ClientIDIn []string `json:"clientIdIn,omitempty"`
}

type WalletsPagination struct {
	Items []*crypto_service.Wallet `json:"items,omitempty"`
}

type InvoiceStatus string

const (
	InvoiceStatusUnknownStatus InvoiceStatus = "UNKNOWN_STATUS"
	InvoiceStatusNew           InvoiceStatus = "NEW"
	InvoiceStatusPending       InvoiceStatus = "PENDING"
	InvoiceStatusFailed        InvoiceStatus = "FAILED"
	InvoiceStatusSuccess       InvoiceStatus = "SUCCESS"
)

var AllInvoiceStatus = []InvoiceStatus{
	InvoiceStatusUnknownStatus,
	InvoiceStatusNew,
	InvoiceStatusPending,
	InvoiceStatusFailed,
	InvoiceStatusSuccess,
}

func (e InvoiceStatus) IsValid() bool {
	switch e {
	case InvoiceStatusUnknownStatus, InvoiceStatusNew, InvoiceStatusPending, InvoiceStatusFailed, InvoiceStatusSuccess:
		return true
	}
	return false
}

func (e InvoiceStatus) String() string {
	return string(e)
}

func (e *InvoiceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvoiceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvoiceStatus", str)
	}
	return nil
}

func (e InvoiceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
